{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","models/mock-pokemons.ts","services/pokemon-service.ts","hooks/pokemon.hook.ts","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","pages/page-not-found.tsx","services/authentication-service.ts","pages/login.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","arguments","length","undefined","Date","concat","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","_ref","pokemon","borderColor","setColor","useState","history","useHistory","_jsx","className","onMouseEnter","showBorder","onMouseLeave","hideBorder","onClick","goToPokemon","id","push","children","_jsxs","style","src","picture","alt","name","created","types","map","POKEMONS","hp","cp","PokemonService","getPokemons","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","getPokemon","data","isEmpty","find","updatePokemon","method","body","JSON","stringify","headers","index","findIndex","deletePokemon","filter","addPokemon","searchPokemon","term","includes","Object","keys","console","process","usePokemons","setPokemons","useEffect","PokemonSearch","setTerm","placeholder","value","onChange","e","target","handleInputChange","Link","to","PokemonList","position","bottom","right","Loader","PokemonsDetail","match","setPokemon","params","width","margin","PokemonForm","isEditForm","form","setForm","isValid","hasType","fieldName","fieldValue","newField","_objectSpread","isTypesValid","handleSubmit","preventDefault","validateForm","newForm","isAddForm","start","end","startsWith","endsWith","errorMsg","test","onSubmit","htmlFor","marginBottom","checked","disabled","selectType","currentType","PokemonEdit","Pokemon","constructor","PokemonAdd","getTime","PageNotFound","AuthenticationService","login","username","password","isAuthenticated","setTimeout","Login","message","setMessage","PrivateRoute","component","Component","rest","_objectWithoutProperties","_excluded","Route","render","props","Redirect","pathname","App","Router","Switch","exact","path","PokemonsList","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5c48ccc5.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => {\r\n  return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\r\n}\r\n   \r\nexport default formatDate;","const formatType = (type: string): string => {\r\n\tlet color: string;\r\n\r\n\tswitch (type) {\r\n    case 'Feu': \r\n    \tcolor = 'red lighten-1'; \r\n    \tbreak; \r\n    case 'Eau': \r\n    \tcolor = 'blue lighten-1'; \r\n    \tbreak; \r\n    case 'Plante': \r\n    \tcolor = 'green lighten-1'; \r\n    \tbreak; \r\n    case 'Insecte': \r\n    \tcolor = 'brown lighten-1'; \r\n    \tbreak; \r\n    case 'Normal': \r\n    \tcolor = 'grey lighten-3'; \r\n    \tbreak; \r\n    case 'Vol': \r\n    \tcolor = 'blue lighten-3'; \r\n    \tbreak; \r\n    case 'Poison': \r\n    \tcolor = 'deep-purple accent-1'; \r\n    \tbreak; \r\n    case 'Fée': \r\n    \tcolor = 'pink lighten-4'; \r\n    \tbreak; \r\n    case 'Psy': \r\n    \tcolor = 'deep-purple darken-2'; \r\n    \tbreak; \r\n    case 'Electrik': \r\n    \tcolor = 'lime accent-1'; \r\n    \tbreak; \r\n    case 'Combat': \r\n    \tcolor = 'deep-orange'; \r\n    \tbreak; \r\n    default: \r\n    \tcolor = 'grey'; \r\n    \tbreak; \r\n\t}\r\n\r\n\treturn `chip ${color}`;\r\n}\r\n\r\nexport default formatType;","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\n\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\n\r\nimport './pokemon-card.css';\r\n\r\ntype Props = {\r\n    pokemon: Pokemon,\r\n    borderColor?: string\r\n};\r\n\r\nconst PokemonCard: FunctionComponent<Props> = ({ pokemon, borderColor = '#009688' }) => {\r\n\r\n    const [color, setColor] = useState<string>();\r\n    const history = useHistory();\r\n\r\n    const showBorder = () => {\r\n        setColor(borderColor);\r\n    };\r\n\r\n    const hideBorder = () => {\r\n        setColor('#f5f5f5');\r\n    };\r\n\r\n    const goToPokemon = (id: number) => {\r\n        history.push(`/pokemons/${id}`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"col s6 m4\" onMouseEnter={showBorder} onMouseLeave={hideBorder} onClick={() => goToPokemon(pokemon.id)}>\r\n            <div className=\"card horizontal\" style={{ borderColor: color }}>\r\n                <div className=\"card-image\">\r\n                    <img src={pokemon.picture} alt={pokemon.name} />\r\n                </div>\r\n                <div className=\"card-stacked\">\r\n                    <div className=\"card-content\">\r\n                        <p>{pokemon.name}</p>\r\n                        <p><small>{formatDate(pokemon.created)}</small></p>\r\n                        {pokemon.types.map(type => (\r\n                            <span key={type} className={formatType(type)}>{type}</span>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonCard;","import Pokemon from './pokemon';\r\n  \r\nexport const POKEMONS: Pokemon[] = [\r\n {\r\n  id: 1,\r\n  name: \"Bulbizarre\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r\n  types: [\"Plante\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 2,\r\n  name: \"Salamèche\",\r\n  hp: 28,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 3,\r\n  name: \"Carapuce\",\r\n  hp: 21,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\r\n  types: [\"Eau\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 4,\r\n  name: \"Aspicot\",\r\n  hp: 16,\r\n  cp: 2,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\r\n  types: [\"Insecte\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 5,\r\n  name: \"Roucool\",\r\n  hp: 30,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 6,\r\n  name: \"Rattata\",\r\n  hp: 18,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 7,\r\n  name: \"Piafabec\",\r\n  hp: 14,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 8,\r\n  name: \"Abo\",\r\n  hp: 16,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\r\n  types: [\"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 9,\r\n  name: \"Pikachu\",\r\n  hp: 21,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\r\n  types: [\"Electrik\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 10,\r\n  name: \"Sabelette\",\r\n  hp: 19,\r\n  cp: 3,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 11,\r\n  name: \"Mélofée\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\r\n  types: [\"Fée\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 12,\r\n  name: \"Groupix\",\r\n  hp: 17,\r\n  cp: 8,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n }\r\n];\r\n\r\nexport default POKEMONS;","import POKEMONS from \"../models/mock-pokemons\";\r\nimport Pokemon from \"../models/pokemon\";\r\n\r\nexport default class PokemonService {\r\n\r\n  static pokemons:Pokemon[] = POKEMONS;\r\n\r\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n\r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch('http://localhost:3001/pokemons')\r\n              .then(response => response.json())\r\n              .catch(error => this.handleError(error));\r\n    }\r\n\r\n    return new Promise(resolve => {\r\n      resolve(this.pokemons);\r\n    });\r\n  }\r\n\r\n  static getPokemon(id: number): Promise<Pokemon | any> {\r\n    \r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${id}`)\r\n              .then(response => response.json())\r\n              .then(data => this.isEmpty(data) ? null : data)\r\n              .catch(error => this.handleError(error));\r\n    }\r\n\r\n    return new Promise(resolve => {    \r\n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\r\n    }); \r\n  }\r\n\r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n\r\n    return new Promise(resolve => {\r\n      const { id } = pokemon;\r\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n      this.pokemons[index] = pokemon;\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n\r\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n\r\n    return new Promise(resolve => {    \r\n      const { id } = pokemon;\r\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n      resolve({});\r\n    }); \r\n  }\r\n\r\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    delete pokemon.created;\r\n\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n\r\n    return new Promise(resolve => {    \r\n      this.pokemons.push(pokemon);\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n\r\n  static searchPokemon(term: string): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n\r\n    return new Promise(resolve => {    \r\n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\r\n      resolve(results);\r\n    });\r\n\r\n  }\r\n\r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n\r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n}","import { useEffect, useState } from \"react\";\r\nimport Pokemon from \"../models/pokemon\";\r\nimport PokemonService from \"../services/pokemon-service\";\r\n\r\nconst usePokemons = () => {\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n\r\n    useEffect(() => {\r\n        PokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\r\n    }, []);\r\n\r\n    return pokemons;\r\n}\r\n\r\nexport default usePokemons;","import React, { FunctionComponent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\n\r\nconst PokemonSearch: FunctionComponent = () => {\r\n\r\n    const [term, setTerm] = useState<string>('');\r\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const term = e.target.value;\r\n        setTerm(term);\r\n\r\n        if (term.length <= 1) {\r\n            setPokemons([]);\r\n            return;\r\n        }\r\n\r\n        PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col s12 m6 offset-m3\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-content\">\r\n                        <div className=\"input-field\">\r\n                            <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} />\r\n                        </div>\r\n                        <div className='collection'>\r\n                            {pokemons.map((pokemon) => (\r\n                                <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\r\n                                    {pokemon.name}\r\n                                </Link>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport PokemonCard from '../components/pokemon-card';\r\nimport { Link } from 'react-router-dom';\r\nimport usePokemons from '../hooks/pokemon.hook';\r\nimport PokemonSearch from '../components/pokemon-search';\r\n\r\nconst PokemonList: FunctionComponent = () => {\r\n\r\n    const pokemons = usePokemons();\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"center\">Pokédex</h1>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <PokemonSearch />\r\n                    {pokemons.map(pokemon => (\r\n                        <PokemonCard key={pokemon.id} pokemon={pokemon} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\r\n                style={{ position: 'fixed', bottom: '25px', right: '25px' }}\r\n                to=\"/pokemon/add\">\r\n                <i className=\"material-icons\">add</i>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonList;","import React, { FunctionComponent } from 'react';\r\n\r\nconst Loader: FunctionComponent = () => {\r\n\r\n    return (\r\n        <div className=\"preloader-wrapper big active\">\r\n            <div className=\"spinner-layer spinner-blue\">\r\n                <div className=\"circle-clipper left\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n                <div className=\"gap-patch\">\r\n                    <div className=\"circle\"></div>\r\n                </div><div className=\"circle-clipper right\">\r\n                    <div className=\"circle\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport Loader from '../components/loader';\r\n\r\ntype Params = { id: string };\r\n\r\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n\r\n    const [pokemon, setPokemon] = useState<Pokemon | null>(null);\r\n\r\n    useEffect(() => {\r\n        PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n    }, [match.params.id]);\r\n\r\n    return (\r\n        <div>\r\n            {pokemon ? (\r\n                <div className=\"row\">\r\n                    <div className=\"col s12 m8 offset-m2\">\r\n                        <h2 className=\"header center\">{pokemon.name}</h2>\r\n                        <div className=\"card hoverable\">\r\n                            <div className=\"card-image\">\r\n                                <img src={pokemon.picture} alt={pokemon.name} style={{ width: '250px', margin: '0 auto' }} />\r\n                                <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn-floating halfway-fab waves-effect waves-light\"><i className=\"material-icons\">edit</i></Link>\r\n                            </div>\r\n                            <div className=\"card-stacked\">\r\n                                <div className=\"card-content\">\r\n                                    <table className=\"bordered striped\">\r\n                                        <tbody>\r\n                                            <tr>\r\n                                                <td>Nom</td>\r\n                                                <td><strong>{pokemon.name}</strong></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Points de vie</td>\r\n                                                <td><strong>{pokemon.hp}</strong></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Dégâts</td>\r\n                                                <td><strong>{pokemon.cp}</strong></td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Types</td>\r\n                                                <td>\r\n                                                    {pokemon.types.map(type => (\r\n                                                        <span key={type} className={formatType(type)}>{type}</span>\r\n                                                    ))}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>Date de création</td>\r\n                                                <td>{formatDate(pokemon.created)}</td>\r\n                                            </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                                <div className=\"card-action\">\r\n                                    <Link to=\"/\">Retour</Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <h4 className=\"center\"><Loader /></h4>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonsDetail;","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from '../services/pokemon-service';\r\n\r\ntype Props = {\r\n    pokemon: Pokemon,\r\n    isEditForm: boolean\r\n};\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n    picture: Field,\r\n    name: Field,\r\n    hp: Field,\r\n    cp: Field,\r\n    types: Field\r\n}\r\n\r\nconst PokemonForm: FunctionComponent<Props> = ({ pokemon, isEditForm }) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        picture: { value: pokemon.picture },\r\n        name: { value: pokemon.name, isValid: true },\r\n        hp: { value: pokemon.hp, isValid: true },\r\n        cp: { value: pokemon.cp, isValid: true },\r\n        types: { value: pokemon.types, isValid: true }\r\n    });\r\n\r\n    const types: string[] = [\r\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n    ];\r\n\r\n    const hasType = (type: string): boolean => {\r\n        return form.types.value.includes(type);\r\n    }\r\n\r\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const checked = e.target.checked;\r\n        let newField: Field;\r\n\r\n        if (checked) {\r\n            // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\r\n            const newTypes: string[] = form.types.value.concat([type]);\r\n            newField = { value: newTypes };\r\n        } else {\r\n            // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\r\n            const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n            newField = { value: newTypes };\r\n        }\r\n\r\n        setForm({ ...form, ...{ types: newField } });\r\n    }\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n        setForm({ ...form, ...newField });\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        // Validator url\r\n        if (isAddForm()) {\r\n\r\n            const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n            const end = \".png\";\r\n\r\n            if (!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\r\n                const errorMsg: string = 'L\\'url n\\'est pas valide.';\r\n                const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\r\n                newForm = { ...newForm, ...{ picture: newField } };\r\n            } else {\r\n                const newField: Field = { value: form.picture.value, error: '', isValid: true };\r\n                newForm = { ...newForm, ...{ picture: newField } };\r\n            }\r\n        }\r\n\r\n        // Validator name\r\n        if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n            const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\r\n            const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ name: newField } };\r\n        }\r\n\r\n        // Validator hp\r\n        if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n            const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n            const newField: Field = { value: form.hp.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ hp: newField } };\r\n        }\r\n\r\n        // Validator cp\r\n        if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n            const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\r\n            const newField: Field = { value: form.cp.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ cp: newField } };\r\n        }\r\n\r\n        setForm(newForm);\r\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n    }\r\n\r\n    const isTypesValid = (type: string): boolean => {\r\n        // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\r\n        // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\r\n        if (form.types.value.length === 1 && hasType(type)) {\r\n            return false;\r\n        }\r\n\r\n        // Cas n°1: Le pokémon a au moins 3 types.\r\n        // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\r\n        if (form.types.value.length >= 3 && !hasType(type)) {\r\n            return false;\r\n        }\r\n\r\n        // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \r\n        // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\r\n        return true;\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const isFormValid = validateForm();\r\n        if (isFormValid) {\r\n            pokemon.picture = form.picture.value;\r\n            pokemon.name = form.name.value;\r\n            pokemon.hp = form.hp.value;\r\n            pokemon.cp = form.cp.value;\r\n            pokemon.types = form.types.value;\r\n            isEditForm ? updatePokemon() : addPokemon();\r\n        }\r\n    }\r\n\r\n    const deletePokemon = () => {\r\n        PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\r\n    }\r\n\r\n    const isAddForm = (): boolean => {\r\n        return !isEditForm;\r\n    }\r\n\r\n    const addPokemon = () => {\r\n        PokemonService.addPokemon(pokemon).then(() => history.push(`/pokemons`));\r\n    }\r\n\r\n    const updatePokemon = () => {\r\n        PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={(e) => handleSubmit(e)}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\">\r\n                        {isEditForm && (\r\n                            <div className=\"card-image\">\r\n                                <img src={pokemon.picture} alt={pokemon.name} style={{ width: '250px', margin: '0 auto' }} />\r\n                                <span className=\"btn-floating halfway-fab waves-effect waves-light\">\r\n                                    <i onClick={deletePokemon} className=\"material-icons\">delete</i>\r\n                                </span>\r\n                            </div>\r\n                        )}\r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                {/* Pokemon picture */}\r\n                                {isAddForm() && (\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"picture\">Image</label>\r\n                                        <input id=\"picture\" type=\"text\" name=\"picture\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\r\n                                        {/* error */}\r\n                                        {form.picture.error &&\r\n                                            <div className=\"card-panel red accent-1\">\r\n                                                {form.picture.error}\r\n                                            </div>}\r\n                                    </div>\r\n                                )}\r\n                                {/* Pokemon name */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"name\">Nom</label>\r\n                                    <input id=\"name\" type=\"text\" name=\"name\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.name.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.name.error}\r\n                                        </div>}\r\n                                </div>\r\n                                {/* Pokemon hp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"hp\">Point de vie</label>\r\n                                    <input id=\"hp\" type=\"number\" name=\"hp\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.hp.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.hp.error}\r\n                                        </div>}\r\n                                </div>\r\n                                {/* Pokemon cp */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"cp\">Dégâts</label>\r\n                                    <input id=\"cp\" type=\"number\" name=\"cp\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.cp.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.cp.error}\r\n                                        </div>}\r\n                                </div>\r\n                                {/* Pokemon types */}\r\n                                <div className=\"form-group\">\r\n                                    <label>Types</label>\r\n                                    {types.map(type => (\r\n                                        <div key={type} style={{ marginBottom: '10px' }}>\r\n                                            <label>\r\n                                                <input id={type} type=\"checkbox\" name=\"types\" className=\"filled-in\" value={type} checked={hasType(type)} disabled={!isTypesValid(type)} onChange={e => selectType(type, e)}></input>\r\n                                                <span>\r\n                                                    <p className={formatType(type)}>{type}</p>\r\n                                                </span>\r\n                                            </label>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Loader from '../components/loader';\r\n\r\n\r\ntype Params = { id: string };\r\n\r\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n\r\n    const [pokemon, setPokemon] = useState<Pokemon | null>(null);\r\n\r\n    useEffect(() => {\r\n        PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\r\n    }, [match.params.id]);\r\n\r\n    return (\r\n        <div>\r\n            {pokemon ? (\r\n                <div className=\"row\">\r\n                    <h2 className=\"header center\">Éditer {pokemon.name}</h2>\r\n                    <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\r\n                </div>\r\n            ) : (\r\n                <h4 className=\"center\"><Loader /></h4>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonEdit;","export default class Pokemon {\r\n    id: number;\r\n    hp: number;\r\n    cp: number;\r\n    name: string;\r\n    picture: string;\r\n    types: Array<string>;\r\n    created?: Date;\r\n    \r\n    constructor(\r\n     id: number,\r\n     hp: number = 100,\r\n     cp: number = 10,\r\n     name: string = '...',\r\n     picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\r\n     types: Array<string> = ['Normal'],\r\n     created: Date = new Date()\r\n    ) {\r\n     this.id = id;\r\n     this.hp = hp;\r\n     this.cp = cp;\r\n     this.name = name;\r\n     this.picture = picture;\r\n     this.types = types;\r\n     this.created = created;\r\n    }\r\n   }","import React, { FunctionComponent, useState } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonForm from '../components/pokemon-form';\r\n\r\nconst PokemonAdd: FunctionComponent = () => {\r\n\r\n    const [id] = useState<number>(new Date().getTime());\r\n    const [pokemon] = useState<Pokemon>(new Pokemon(id));\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Ajouter un pokémon</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonAdd;","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PageNotFound: FunctionComponent = () => {\r\n\r\n    return (\r\n        <div className=\"center\">\r\n            <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\" />\r\n            <h1>Hey, cette page n'existe pas !</h1>\r\n            <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n                Retourner à l'accueil\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PageNotFound;","export default class AuthenticationService {\r\n\r\n  static isAuthenticated:boolean = false;\r\n\r\n  static login(username: string, password: string): Promise<boolean> {\r\n    const isAuthenticated = (username === 'pikachu' && password === 'pikachu');\r\n\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        this.isAuthenticated = isAuthenticated;\r\n        resolve(isAuthenticated);\r\n      }, 1000);\r\n    });\r\n  }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AuthenticationService from '../services/authentication-service';\r\n\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n    username: Field,\r\n    password: Field\r\n}\r\n\r\nconst Login: FunctionComponent = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [form, setForm] = useState<Form>({\r\n        username: { value: '' },\r\n        password: { value: '' },\r\n    });\r\n\r\n    const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pikachu / pikachu)');\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const fieldName: string = e.target.name;\r\n        const fieldValue: string = e.target.value;\r\n        const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n        setForm({ ...form, ...newField });\r\n    }\r\n\r\n    const validateForm = () => {\r\n        let newForm: Form = form;\r\n\r\n        // Validator username\r\n        if (form.username.value.length < 3) {\r\n            const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\r\n            const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ username: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.username.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ username: newField } };\r\n        }\r\n\r\n        // Validator password\r\n        if (form.password.value.length < 6) {\r\n            const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\r\n            const newField: Field = { value: form.password.value, error: errorMsg, isValid: false };\r\n            newForm = { ...newForm, ...{ password: newField } };\r\n        } else {\r\n            const newField: Field = { value: form.password.value, error: '', isValid: true };\r\n            newForm = { ...newForm, ...{ password: newField } };\r\n        }\r\n\r\n        setForm(newForm);\r\n\r\n        return newForm.username.isValid && newForm.password.isValid;\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const isFormValid = validateForm();\r\n        if (isFormValid) {\r\n            setMessage('👉 Tentative de connexion en cours ...');\r\n            AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\r\n                if (!isAuthenticated) {\r\n                    setMessage('🔐 Identifiant ou mot de passe incorrect.');\r\n                    return;\r\n                }\r\n\r\n                history.push('/pokemons');\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={(e) => handleSubmit(e)}>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <div className=\"card hoverable\">\r\n                        <div className=\"card-stacked\">\r\n                            <div className=\"card-content\">\r\n                                {/* Form message */}\r\n                                {message && <div className=\"form-group\">\r\n                                    <div className=\"card-panel grey lighten-5\">\r\n                                        {message}\r\n                                    </div>\r\n                                </div>}\r\n                                {/* Field username */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"username\">Identifiant</label>\r\n                                    <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.username.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.username.error}\r\n                                        </div>}\r\n                                </div>\r\n                                {/* Field password */}\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\">Mot de passe</label>\r\n                                    <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\r\n                                    {/* error */}\r\n                                    {form.password.error &&\r\n                                        <div className=\"card-panel red accent-1\">\r\n                                            {form.password.error}\r\n                                        </div>}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-action center\">\r\n                                {/* Submit button */}\r\n                                <button type=\"submit\" className=\"btn\">Valider</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Login;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthenticationService from './services/authentication-service';\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n    <Route {...rest} render={(props) => {\r\n        const isAuthenticated = AuthenticationService.isAuthenticated;\r\n        if (!isAuthenticated) {\r\n            return <Redirect to={{ pathname: '/login' }} />\r\n        }\r\n\r\n        return <Component {...props} />\r\n    }} />\r\n);\r\n\r\nexport default PrivateRoute;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport PokemonsList from './pages/pokemon-list';\r\nimport PokemonsDetail from './pages/pokemon-detail';\r\nimport PokemonEdit from './pages/pokemon-edit';\r\nimport PokemonAdd from './pages/pokemon-add';\r\nimport PageNotFound from './pages/page-not-found';\r\nimport Login from './pages/login';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nconst App: React.FC = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <nav>\r\n                    <div className=\"nav-wrapper teal\">\r\n                        <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\r\n                    </div>\r\n                </nav>\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/\" component={PokemonsList} />\r\n                    <Route exact path=\"/login\" component={Login} />\r\n                    <PrivateRoute exact path=\"/pokemons\" component={PokemonsList} />\r\n                    <PrivateRoute exact path=\"/pokemon/add\" component={PokemonAdd} />\r\n                    <PrivateRoute exact path=\"/pokemons/edit/:id\" component={PokemonEdit} />\r\n                    <PrivateRoute path=\"/pokemons/:id\" component={PokemonsDetail} />\r\n                    <Route component={PageNotFound} />\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}